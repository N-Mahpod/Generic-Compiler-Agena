/* Authors: Nerya Mahpod
 * 
 * Team Number:	150060.01.5782.45
 *
 * In order to run this program open the agena console and run the next command:
 *** > run 'D:\\Users\\mahpo\\Documents\\Agena_Staff\\targil01\\VMtoHACK.agn'
 * (with your directory of this file, yes?)
 *
 * After you run it the first time, you can simply enter new files with:
 *** > VMTranslator("C:\\hakuna\\matata\\traslizatsya\\pointless.vm")
 * or:
 *** > hmm()
 *** Enter directory:
 *** C:\hakuna\matata\traslizatsya\pointless.vm
 * 
 * and it will create C:\hakuna\matata\traslizatsya\pointless.asm
 * 
 * There was no test file for the push and pop,
 * but we just wrote the stuff from Nurit's matseget,
 * so we asume that we correct.
 *
 * Enjoy our code, and may the force be with you!
 */

SPACIAL_LABEL := 0

VMtoHACKcmd := proc(VMcmd) is
	local cmds := VMcmd split ' '
	local ret := []
	case cmds[1]
		of 'push' then
			case cmds[2]
				# simple push to the head of the stack
				of 'constant' then
					ret := ret union ['@'&cmds[3], 'D=A', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1']
				
				# RAM[@SP] <-- RAM[LCL + X]
				# Means, push the x local func variable to the head of the stack.
				of 'local' then
					ret := ret union ['@'&cmds[3], 'D=A', '@LCL', 'A=M+D', 'D=M', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1']
				
				# RAM[@SP] <-- RAM[ARG + X]
				# Means, push the x func argument to the head of the stack.
				of 'argument' then
					ret := ret union ['@'&cmds[3], 'D=A', '@ARG', 'A=M+D', 'D=M', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1']
				
				# RAM[@SP] <-- RAM[THIS	+ X]
				# Means, push the x var in the heap to the head of the stack.
				of 'this' then
					ret := ret union ['@'&cmds[3], 'D=A', '@THIS', 'A=M+D', 'D=M', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1']
				
				# RAM[@SP] <-- RAM[THAT + X]
				# Means, push the x local func variable to the head of the stack.
				of 'that' then
					ret := ret union ['@'&cmds[3], 'D=A', '@THAT', 'A=M+D', 'D=M', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1']
				
				# RAM[@SP] <-- RAM[5 + X]
				# Means, push the x tempurary variable to the head of the stack.
				# TEMP = 5; 0<=X<=7		[there are 8 tempurary variables]
				of 'temp' then
					ret := ret union ['@'&cmds[3], 'D=A', '@5', 'A=A+D', 'D=M', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1']
				
				# RAM[@SP] <-- RAM[STATIC + X]
				# for the static variables.
				of 'static' then
					ret := ret union [['@', 404, '.'&cmds[3]], 'D=M', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1']
				
				# Truly, I don't understand this one uses.
				of 'pointer' then
					case cmds[3]
						of '0' then
							ret := ret union ['@THIS']
						of '1' then
							ret := ret union ['@THAT']
					esac
					ret := ret union ['D=M', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1']
			esac
		
		of 'pop' then
			# the opossite of push.
			case cmds[2]			
				# RAM[@SP] --> RAM[LCL + X]
				# Means, push the x local func variable to the head of the stack.
				of 'local' then
					ret := ret union ['@SP', 'A=M-1', 'D=M', '@LCL', 'A=M']
					for i from 1 to tonumber(cmds[3]) by 1 do
						ret := ret union ['A=A+1']
					od
					ret := ret union ['M=D', '@SP', 'M=M-1']
				
				# RAM[@SP] --> RAM[ARG + X]
				# Means, push the x func argument to the head of the stack.
				of 'argument' then
					ret := ret union ['@SP', 'A=M-1', 'D=M', '@ARG', 'A=M']
					for i from 1 to tonumber(cmds[3]) by 1 do
						ret := ret union ['A=A+1']
					od
					ret := ret union ['M=D', '@SP', 'M=M-1']
				
				# RAM[@SP] --> RAM[THIS	+ X]
				# Means, push the x var in the heap to the head of the stack.
				of 'this' then
					ret := ret union ['@SP', 'A=M-1', 'D=M', '@THIS', 'A=M']
					for i from 1 to tonumber(cmds[3]) by 1 do
						ret := ret union ['A=A+1']
					od
					ret := ret union ['M=D', '@SP', 'M=M-1']
				
				# RAM[@SP] --> RAM[THAT + X]
				# Means, push the x local func variable to the head of the stack.
				of 'that' then
					ret := ret union ['@SP', 'A=M-1', 'D=M', '@THAT', 'A=M']
					for i from 1 to tonumber(cmds[3]) by 1 do
						ret := ret union ['A=A+1']
					od
					ret := ret union ['M=D', '@SP', 'M=M-1']
				
				# RAM[@SP] --> RAM[5 + X]
				# Means, push the head of the stack to the x tempurary variable.
				# TEMP = 5; 0<=X<=7		[there are 8 tempurary variables]
				of 'temp' then
					ret := ret union ['@SP', 'A=M-1', 'D=M', '@SP', 'M=M-1', '@'&(tonumber(cmds[3])+5), 'M=D']
				
				# RAM[@SP] --> RAM[STATIC + X]
				# for the static variables.
				of 'static' then
					ret := ret union ['@SP', 'M=M-1', 'A=M', 'D=M', ['@', 404, '.'&cmds[3]], 'M=D']
				
				# Again, I don't understand this one uses.
				of 'pointer' then
					ret := ret union ['@SP', 'A=M-1', 'D=M']
					case cmds[3]
						of '0' then
							ret := ret union ['@THIS']
						of '1' then
							ret := ret union ['@THAT']
					esac
					ret := ret union ['M=D', '@SP', 'M=M-1']
			esac

		
		of 'eq' then
			# In Nurit's lecture there is a shorter solution,
			# but I decided to do something more readable.
			ret := ret union ['@SP', 'A=M-1', 'D=M', 'A=A-1','D=D-M']
				# Now D is the sub between the top of the stack and the one under it.
				# If D is 0 (equals) then push -1.
				# Else (not equals) push 0.
				# 
				# Anyway, before we push the value, we have to pop the top 2 values.
			
			ret := ret union ['@SP', 'M=M-1', 'M=M-1']
			
			local ifEQ := 'LABEL' & SPACIAL_LABEL
			SPACIAL_LABEL +:= 1
			local ifNotEQ := 'LABEL' & SPACIAL_LABEL
			SPACIAL_LABEL +:= 1
			local EndL := 'LABEL' & SPACIAL_LABEL
			SPACIAL_LABEL +:= 1
			ret := ret union ['@'&ifEQ, 'D;JEQ', '@'&ifNotEQ, '0;JMP']
			
			ret := ret union ['(' & ifEQ & ')'] union VMtoHACKcmd('push constant 1') union VMtoHACKcmd('neg') union ['@'&EndL, '0;JMP']
			ret := ret union ['(' & ifNotEQ & ')'] union VMtoHACKcmd('push constant 0') union [ '(' & EndL & ')' ]
			
		of 'lt' then
			ret := ret union ['@SP', 'A=M-1', 'D=M', 'A=A-1','D=D-M']
				# Now D is the sub between the top of the stack and the one under it.
				# If D is bigger than 0 (top bigger) then push -1.
				# Else push 0.
				# 
				# Anyway, before we push the value, we have to pop the top 2 values.
			
			ret := ret union ['@SP', 'M=M-1', 'M=M-1']
			
			local ifEQ := 'LABEL' & SPACIAL_LABEL
			SPACIAL_LABEL +:= 1
			local ifNotEQ := 'LABEL' & SPACIAL_LABEL
			SPACIAL_LABEL +:= 1
			local EndL := 'LABEL' & SPACIAL_LABEL
			SPACIAL_LABEL +:= 1
			ret := ret union ['@'&ifEQ, 'D;JGT', '@'&ifNotEQ, '0;JMP']
			
			ret := ret union ['(' & ifEQ & ')'] union VMtoHACKcmd('push constant 1') union VMtoHACKcmd('neg') union ['@'&EndL, '0;JMP']
			ret := ret union ['(' & ifNotEQ & ')'] union VMtoHACKcmd('push constant 0') union [ '(' & EndL & ')' ]

		of 'gt' then
			ret := ret union ['@SP', 'A=M-1', 'D=M', 'A=A-1','D=D-M']
				# Now D is the sub between the top of the stack and the one under it.
				# If D is smaller than 0 (top smaller) then push -1.
				# Else push 0
				# 
				# Anyway, before we push the value, we have to pop the top 2 values.
			
			ret := ret union ['@SP', 'M=M-1', 'M=M-1']
			
			local ifEQ := 'LABEL' & SPACIAL_LABEL
			SPACIAL_LABEL +:= 1
			local ifNotEQ := 'LABEL' & SPACIAL_LABEL
			SPACIAL_LABEL +:= 1
			local EndL := 'LABEL' & SPACIAL_LABEL
			SPACIAL_LABEL +:= 1
			ret := ret union ['@'&ifEQ, 'D;JLT', '@'&ifNotEQ, '0;JMP']
			
			ret := ret union ['(' & ifEQ & ')'] union VMtoHACKcmd('push constant 1') union VMtoHACKcmd('neg') union ['@'&EndL, '0;JMP']
			ret := ret union ['(' & ifNotEQ & ')'] union VMtoHACKcmd('push constant 0') union [ '(' & EndL & ')' ]
		
		of 'add' then
			ret := ret union ['@SP', 'A=M-1', 'D=M', 'A=A-1', 'M=M+D', '@SP', 'M=M-1']
			# from Nurit's matseget. Thanks.
		of 'sub' then
			ret := ret union ['@SP', 'A=M-1', 'D=M', 'A=A-1', 'M=M-D', '@SP', 'M=M-1']
		of 'neg' then
			ret := ret union ['@SP', 'A=M-1', 'M=-M']
		of 'and' then
			ret := ret union ['@SP', 'A=M-1', 'D=M', 'A=A-1', 'M=M&D', '@SP', 'M=M-1']
		of 'or' then
			ret := ret union ['@SP', 'A=M-1', 'D=M', 'A=A-1', 'M=M|D', '@SP', 'M=M-1']
		of 'not' then
			ret := ret union ['@SP', 'A=M', 'A=A-1', 'D=M', 'D=!D', 'M=D']
	esac
	return ret
end 
 

VMtoHACK := proc(VMarr) is
	/*
	The given CPU emulator (for HACK) doesn't load the registers with values,
	and @SP (RAM[0]) is zero,
	so we decided to load it ourselves (with 256, like the VM emulator).
	(Instead of doing it every time we open the emulator again)
	*/
	local HACKarr := 			['@SP', 	'D=M', '@START0', 'D;JNE', '@256',  'D=A', '@SP', 	'M=D', '(START0)']
	# HACKarr := HACKarr union 	['@LCL', 	'D=M', '@START1', 'D;JNE', '@300',  'D=A', '@LCL', 	'M=D', '(START1)']
	# HACKarr := HACKarr union 	['@ARG', 	'D=M', '@START2', 'D;JNE', '@400',  'D=A', '@ARG', 	'M=D', '(START2)']
	# HACKarr := HACKarr union 	['@THIS', 	'D=M', '@START3', 'D;JNE', '@3000', 'D=A', '@THIS', 'M=D', '(START3)']
	# HACKarr := HACKarr union 	['@THAT', 	'D=M', '@START4', 'D;JNE', '@3010', 'D=A', '@THAT', 'M=D', '(START4)']
	for l in VMarr do
		HACKarr := HACKarr union VMtoHACKcmd(l)
	od
	return HACKarr
end
 

VMTranslator := proc(VMfileAdress) is
	local VMfile := io.open(VMfileAdress)
	local VMarr := io.readlines(VMfile)
	
	local n := VMfileAdress split '\\'
	local fn := top n
	local ffn := fn split '.'
	local fffn := ffn[1]
	local newD := join(n[1 to -2], '\\')& '\\' & fffn & '.asm'
	local HACKfile := io.open(newD, 'w')
	
	local HACKarr := VMtoHACK(VMarr)
	for l in HACKarr do
		if l[2] = 404 then
			l[2] := fffn
			l := join(l, '')
		fi
		io.writeline(HACKfile, l)
	od
	io.close(VMfile)
	io.close(HACKfile)
end
 

hmm := proc() is
	print("Enter VM file directory")
	local dir := io.read()
	VMTranslator(dir)
end


hmm()