/* Authors: Nerya Mahpod
 * 
 * Team Number:	150060.01.5782.45
 *
 * This file is the important part of ex 1, so I can run it in the main.
 *
 * Enjoy my code, and may the force be with you!
 */
create table ex1;

ex1.SPACIAL_LABEL := 0;

ex1.VMtoHACKcmd := proc(VMcmd) is
	local cmds := VMcmd split ' ';
	local ret := [];
	case cmds[1]
		of 'push' then
			case cmds[2]
				# simple push to the head of the stack
				of 'constant' then
					ret := ret union ['@'&cmds[3], 'D=A', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1'];
				
				# RAM[@SP] <-- RAM[LCL + X]
				# Means, push the x local func variable to the head of the stack.
				of 'local' then
					ret := ret union ['@'&cmds[3], 'D=A', '@LCL', 'A=M+D', 'D=M', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1'];
				
				# RAM[@SP] <-- RAM[ARG + X]
				# Means, push the x func argument to the head of the stack.
				of 'argument' then
					ret := ret union ['@'&cmds[3], 'D=A', '@ARG', 'A=M+D', 'D=M', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1'];
				
				# RAM[@SP] <-- RAM[THIS	+ X]
				# Means, push the x var in the heap to the head of the stack.
				of 'this' then
					ret := ret union ['@'&cmds[3], 'D=A', '@THIS', 'A=M+D', 'D=M', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1'];
				
				# RAM[@SP] <-- RAM[THAT + X]
				# Means, push the x local func variable to the head of the stack.
				of 'that' then
					ret := ret union ['@'&cmds[3], 'D=A', '@THAT', 'A=M+D', 'D=M', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1'];
				
				# RAM[@SP] <-- RAM[5 + X]
				# Means, push the x tempurary variable to the head of the stack.
				# TEMP = 5; 0<=X<=7		[there are 8 tempurary variables]
				of 'temp' then
					ret := ret union ['@'&cmds[3], 'D=A', '@5', 'A=A+D', 'D=M', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1'];
				
				# RAM[@SP] <-- RAM[STATIC + X]
				# for the static variables.
				of 'static' then
					ret := ret union [['@', 404, '.'&cmds[3]], 'D=M', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1'];
				
				# Truly, I don't understand this one uses.
				of 'pointer' then
					case cmds[3]
						of '0' then
							ret := ret union ['@THIS'];
						of '1' then
							ret := ret union ['@THAT'];
					esac
					ret := ret union ['D=M', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1'];
			esac
		
		of 'pop' then
			# the opossite of push.
			case cmds[2]			
				# RAM[@SP] --> RAM[LCL + X]
				# Means, push the x local func variable to the head of the stack.
				of 'local' then
					ret := ret union ['@SP', 'A=M-1', 'D=M', '@LCL', 'A=M'];
					for i from 1 to tonumber(cmds[3]) by 1 do
						ret := ret union ['A=A+1'];
					od
					ret := ret union ['M=D', '@SP', 'M=M-1'];
				
				# RAM[@SP] --> RAM[ARG + X]
				# Means, push the x func argument to the head of the stack.
				of 'argument' then
					ret := ret union ['@SP', 'A=M-1', 'D=M', '@ARG', 'A=M'];
					for i from 1 to tonumber(cmds[3]) by 1 do
						ret := ret union ['A=A+1'];
					od
					ret := ret union ['M=D', '@SP', 'M=M-1'];
				
				# RAM[@SP] --> RAM[THIS	+ X]
				# Means, push the x var in the heap to the head of the stack.
				of 'this' then
					ret := ret union ['@SP', 'A=M-1', 'D=M', '@THIS', 'A=M'];
					for i from 1 to tonumber(cmds[3]) by 1 do
						ret := ret union ['A=A+1'];
					od
					ret := ret union ['M=D', '@SP', 'M=M-1'];
				
				# RAM[@SP] --> RAM[THAT + X]
				# Means, push the x local func variable to the head of the stack.
				of 'that' then
					ret := ret union ['@SP', 'A=M-1', 'D=M', '@THAT', 'A=M'];
					for i from 1 to tonumber(cmds[3]) by 1 do
						ret := ret union ['A=A+1'];
					od
					ret := ret union ['M=D', '@SP', 'M=M-1'];
				
				# RAM[@SP] --> RAM[5 + X]
				# Means, push the head of the stack to the x tempurary variable.
				# TEMP = 5; 0<=X<=7		[there are 8 tempurary variables]
				of 'temp' then
					ret := ret union ['@SP', 'A=M-1', 'D=M', '@SP', 'M=M-1', '@'&(tonumber(cmds[3])+5), 'M=D'];
				
				# RAM[@SP] --> RAM[STATIC + X]
				# for the static variables.
				of 'static' then
					ret := ret union ['@SP', 'M=M-1', 'A=M', 'D=M', ['@', 404, '.'&cmds[3]], 'M=D'];
				
				# Again, I don't understand this one uses.
				of 'pointer' then
					ret := ret union ['@SP', 'A=M-1', 'D=M'];
					case cmds[3]
						of '0' then
							ret := ret union ['@THIS'];
						of '1' then
							ret := ret union ['@THAT'];
					esac
					ret := ret union ['M=D', '@SP', 'M=M-1'];
			esac

		
		of 'eq' then
			# In Nurit's lecture there is a shorter solution,
			# but I decided to do something more readable.
			ret := ret union ['@SP', 'A=M-1', 'D=M', 'A=A-1','D=D-M'];
				# Now D is the sub between the top of the stack and the one under it.
				# If D is 0 (equals) then push -1.
				# Else (not equals) push 0.
				# 
				# Anyway, before we push the value, we have to pop the top 2 values.
			
			ret := ret union ['@SP', 'M=M-1', 'M=M-1'];
			
			local ifEQ := 'LABEL' & ex1.SPACIAL_LABEL;
			ex1.SPACIAL_LABEL +:= 1;
			local ifNotEQ := 'LABEL' & ex1.SPACIAL_LABEL;
			ex1.SPACIAL_LABEL +:= 1;
			local EndL := 'LABEL' & ex1.SPACIAL_LABEL;
			ex1.SPACIAL_LABEL +:= 1;
			ret := ret union ['@'&ifEQ, 'D;JEQ', '@'&ifNotEQ, '0;JMP'];
			
			ret := ret union ['(' & ifEQ & ')'] union ex1.VMtoHACKcmd('push constant 1') union ex1.VMtoHACKcmd('neg') union ['@'&EndL, '0;JMP'];
			ret := ret union ['(' & ifNotEQ & ')'] union ex1.VMtoHACKcmd('push constant 0') union [ '(' & EndL & ')' ];
			
		of 'lt' then
			ret := ret union ['@SP', 'A=M-1', 'D=M', 'A=A-1','D=D-M'];
				# Now D is the sub between the top of the stack and the one under it.
				# If D is bigger than 0 (top bigger) then push -1.
				# Else push 0.
				# 
				# Anyway, before we push the value, we have to pop the top 2 values.
			
			ret := ret union ['@SP', 'M=M-1', 'M=M-1'];
			
			local ifEQ := 'LABEL' & ex1.SPACIAL_LABEL;
			ex1.SPACIAL_LABEL +:= 1;
			local ifNotEQ := 'LABEL' & ex1.SPACIAL_LABEL;
			ex1.SPACIAL_LABEL +:= 1;
			local EndL := 'LABEL' & ex1.SPACIAL_LABEL;
			ex1.SPACIAL_LABEL +:= 1;
			ret := ret union ['@'&ifEQ, 'D;JGT', '@'&ifNotEQ, '0;JMP'];
			
			ret := ret union ['(' & ifEQ & ')'] union ex1.VMtoHACKcmd('push constant 1') union ex1.VMtoHACKcmd('neg') union ['@'&EndL, '0;JMP'];
			ret := ret union ['(' & ifNotEQ & ')'] union ex1.VMtoHACKcmd('push constant 0') union [ '(' & EndL & ')' ];

		of 'gt' then
			ret := ret union ['@SP', 'A=M-1', 'D=M', 'A=A-1','D=D-M'];
				# Now D is the sub between the top of the stack and the one under it.
				# If D is smaller than 0 (top smaller) then push -1.
				# Else push 0
				# 
				# Anyway, before we push the value, we have to pop the top 2 values.
			
			ret := ret union ['@SP', 'M=M-1', 'M=M-1'];
			
			local ifEQ := 'LABEL' & ex1.SPACIAL_LABEL;
			ex1.SPACIAL_LABEL +:= 1;
			local ifNotEQ := 'LABEL' & ex1.SPACIAL_LABEL;
			ex1.SPACIAL_LABEL +:= 1;
			local EndL := 'LABEL' & ex1.SPACIAL_LABEL;
			ex1.SPACIAL_LABEL +:= 1;
			ret := ret union ['@'&ifEQ, 'D;JLT', '@'&ifNotEQ, '0;JMP'];
			
			ret := ret union ['(' & ifEQ & ')'] union ex1.VMtoHACKcmd('push constant 1') union ex1.VMtoHACKcmd('neg') union ['@'&EndL, '0;JMP'];
			ret := ret union ['(' & ifNotEQ & ')'] union ex1.VMtoHACKcmd('push constant 0') union [ '(' & EndL & ')' ];
		
		of 'add' then
			ret := ret union ['@SP', 'A=M-1', 'D=M', 'A=A-1', 'M=M+D', '@SP', 'M=M-1'];
			# from Nurit's matseget. Thanks.
		of 'sub' then
			ret := ret union ['@SP', 'A=M-1', 'D=M', 'A=A-1', 'M=M-D', '@SP', 'M=M-1'];
		of 'neg' then
			ret := ret union ['@SP', 'A=M-1', 'M=-M'];
		of 'and' then
			ret := ret union ['@SP', 'A=M-1', 'D=M', 'A=A-1', 'M=M&D', '@SP', 'M=M-1'];
		of 'or' then
			ret := ret union ['@SP', 'A=M-1', 'D=M', 'A=A-1', 'M=M|D', '@SP', 'M=M-1'];
		of 'not' then
			ret := ret union ['@SP', 'A=M', 'A=A-1', 'D=M', 'D=!D', 'M=D'];
	esac;
	return ret;
end;
